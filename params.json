{
  "name": "Elastic-intro",
  "tagline": "intro to elasticsearch",
  "body": "###Indices and types \r\nEvery time you store data in _Elasticsearch_ it get's saved inside an **index** which has a **type**. compared to _MongoDB_ an index is similar to a database, and a type similar to a collection. Compared to _SQL_ an index would be like a database, and a type like a table.\r\n\r\nconvention: \r\n```\r\nlocalhost:9200/index/type/\r\n```\r\n\r\n**Important note** different types living in the same index cannot have the same field name with different config or field type\r\n\r\n\r\nFor example the following two documents can't co-exist since they share the same index, and both have a _city_ attribute of different types, _string_ and _object_ respectively \r\n\r\n```\r\nlocalhost:9200/test/users/1\r\n\r\n{\r\n    \"city\": \"cityID123\"\r\n}\r\n\r\nlocalhost:9200/test/city/1\r\n\r\n{\r\n    \"city\": {\r\n        \"name\": \"Toronto\"\r\n    }\r\n}\r\n```\r\n\r\nWhen developing with elasticsearch there are 3 main steps we have to consider. **Mapping**, **Indexing**, and **Querying** data\r\n\r\n1. Mapping\r\n\r\nMapping is used to define how elastic should store and index a particular document and it's fields. \r\n\r\nHowever if no mapping was introduced to a specific field on pre-index time, elastic will [dynamically](https://www.elastic.co/guide/en/elasticsearch/guide/current/dynamic-mapping.html) add a **generic** type to that field. Although this may sound tempting, it is not! since generic types are very basic and do not meet queries expectations most of the time.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}